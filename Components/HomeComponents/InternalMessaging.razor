@* Components/Dashboard/InternalMessaging.razor *@

<div class="rounded-2xl bg-white/70 backdrop-blur-sm shadow-lg border border-white/20 overflow-hidden">
    <div class="bg-gradient-to-r from-indigo-500 to-purple-600 p-4">
        <div class="flex items-center justify-between">
            <div class="flex items-center gap-2">
                <div class="w-8 h-8 rounded-lg bg-white/20 backdrop-blur-sm flex items-center justify-center">
                    <svg class="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" />
                    </svg>
                </div>
                <h3 class="font-semibold text-white">Mensajes Internos</h3>
            </div>
            @if (unreadCount > 0)
            {
                <span class="px-2 py-1 bg-red-500 text-white text-xs font-bold rounded-full">@unreadCount</span>
            }
        </div>
    </div>

    <!-- Messages Area -->
    <div class="h-80 overflow-y-auto p-4 space-y-3 bg-gradient-to-b from-slate-50 to-white">
        @foreach (var message in messages)
        {
            <div class="@(message.IsFromMe ? "flex justify-end" : "flex justify-start")">
                <div class="@(message.IsFromMe ? "bg-gradient-to-br from-indigo-500 to-purple-600 text-white" : "bg-white border border-slate-200 text-slate-800") rounded-2xl px-4 py-3 max-w-[85%] shadow-sm">
                    <div class="flex items-center gap-2 mb-1">
                        <span class="text-xs font-semibold @(message.IsFromMe ? "text-white/90" : "text-slate-600")">
                            @message.Sender
                        </span>
                        <span class="text-xs @(message.IsFromMe ? "text-white/70" : "text-slate-400")">
                            @message.Time
                        </span>
                    </div>
                    <p class="text-sm">@message.Text</p>
                    @if (message.IsUrgent)
                    {
                        <div class="mt-2 flex items-center gap-1 text-xs">
                            <svg class="w-3 h-3" fill="currentColor" viewBox="0 0 20 20">
                                <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clip-rule="evenodd" />
                            </svg>
                            <span class="@(message.IsFromMe ? "text-white/90" : "text-red-600") font-medium">Urgente</span>
                        </div>
                    }
                </div>
            </div>
        }
    </div>

    <!-- Quick Messages -->
    <div class="p-3 bg-slate-50 border-t border-slate-200">
        <div class="mb-2">
            <p class="text-xs text-slate-600 font-medium mb-2">Mensajes Rápidos:</p>
            <div class="flex flex-wrap gap-2">
                @foreach (var quickMsg in quickMessages)
                {
                    <button @onclick="() => SendQuickMessage(quickMsg)"
                            class="px-3 py-1.5 text-xs bg-white hover:bg-indigo-50 text-slate-700 rounded-lg border border-slate-200 transition-colors">
                        @quickMsg
                    </button>
                }
            </div>
        </div>
    </div>

    <!-- Input Area -->
    <div class="p-4 bg-white border-t border-slate-200">
        <div class="flex gap-2">
            <input @bind="newMessage"
                   @bind:event="oninput"
                   @onkeypress="HandleKeyPress"
                   type="text"
                   placeholder="Escribe un mensaje..."
                   class="flex-1 px-4 py-2 bg-slate-50 border border-slate-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent text-sm" />
            <button @onclick="SendMessage"
                    class="px-4 py-2 bg-gradient-to-r from-indigo-500 to-purple-600 text-white rounded-lg hover:from-indigo-600 hover:to-purple-700 transition-all">
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8" />
                </svg>
            </button>
        </div>
    </div>
</div>

@code {
    private string newMessage = string.Empty;
    private int unreadCount = 3;

    private List<string> quickMessages = new()
    {
        "✅ Cliente llegó",
        "⏰ Retraso 15 min",
        "📦 Stock bajo",
        "📞 Llamar cliente"
    };

    private List<MessageMock> messages = new()
    {
        new MessageMock
        {
            Sender = "Recepcionista",
            Text = "Buenos días, llegó María González para su turno de las 17:00",
            Time = "16:45",
            IsFromMe = false,
            IsUrgent = false
        },
        new MessageMock
        {
            Sender = "Yo",
            Text = "Perfecto, en 5 minutos la atiendo",
            Time = "16:46",
            IsFromMe = true,
            IsUrgent = false
        },
        new MessageMock
        {
            Sender = "Recepcionista",
            Text = "Quedamos sin stock de Botox para mañana",
            Time = "16:50",
            IsFromMe = false,
            IsUrgent = true
        },
        new MessageMock
        {
            Sender = "Yo",
            Text = "Ok, hacé el pedido para que llegue mañana temprano",
            Time = "16:52",
            IsFromMe = true,
            IsUrgent = false
        }
    };

    private void SendMessage()
    {
        if (!string.IsNullOrWhiteSpace(newMessage))
        {
            messages.Add(new MessageMock
            {
                Sender = "Yo",
                Text = newMessage,
                Time = DateTime.Now.ToString("HH:mm"),
                IsFromMe = true,
                IsUrgent = false
            });
            newMessage = string.Empty;
            StateHasChanged();
        }
    }

    private void SendQuickMessage(string message)
    {
        messages.Add(new MessageMock
        {
            Sender = "Yo",
            Text = message,
            Time = DateTime.Now.ToString("HH:mm"),
            IsFromMe = true,
            IsUrgent = false
        });
        StateHasChanged();
    }

    private void HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            SendMessage();
        }
    }

    private class MessageMock
    {
        public string Sender { get; set; } = string.Empty;
        public string Text { get; set; } = string.Empty;
        public string Time { get; set; } = string.Empty;
        public bool IsFromMe { get; set; }
        public bool IsUrgent { get; set; }
    }
}