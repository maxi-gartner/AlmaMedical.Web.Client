@page "/turnos"
@rendermode InteractiveServer
@inherits AlmaMedical.Web.Client.Base.AuthorizedComponentBase
@using AlmaMedical.Web.Client.Services
@using static AlmaMedical.Web.Client.Services.RolePermissionService

<PageTitle>Turnos - ALMA Medical</PageTitle>

<div class="min-h-screen bg-gray-50/50">
    <!-- Header -->
    <div class="bg-white/95 backdrop-blur-sm rounded-2xl shadow-xl p-6 mb-6 border border-gray-100">
        <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
            <div>
                <h1 class="text-3xl font-bold bg-gradient-to-r from-cyan-600 to-blue-600 bg-clip-text text-transparent">
                    Agenda de Turnos
                </h1>
                <p class="text-gray-600 mt-1">Gestiona citas y reservas de tratamientos</p>
            </div>
            @if (HasPermission(Permission.CreateAppointment))
            {
                <button @onclick="MostrarFormularioNuevo"
                        class="bg-gradient-to-r from-cyan-600 to-blue-600 hover:from-cyan-700 hover:to-blue-700 text-white px-6 py-3 rounded-xl flex items-center gap-2 transition-all duration-300 transform hover:scale-105 shadow-lg hover:shadow-xl">
                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                    </svg>
                    Nuevo Turno
                </button>
            }
        </div>
    </div>

    <!-- Estadísticas del día -->
    <div class="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
        <div class="bg-gradient-to-br from-blue-500 to-cyan-600 rounded-2xl p-6 text-white shadow-xl">
            <div class="flex items-center justify-between">
                <div>
                    <p class="text-blue-100 text-sm">Agendados Hoy</p>
                    <p class="text-3xl font-bold mt-2">@turnos.Count(t => t.Estado == "Scheduled")</p>
                </div>
                <svg class="w-12 h-12 text-blue-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                </svg>
            </div>
        </div>

        <div class="bg-gradient-to-br from-green-500 to-emerald-600 rounded-2xl p-6 text-white shadow-xl">
            <div class="flex items-center justify-between">
                <div>
                    <p class="text-green-100 text-sm">Confirmados</p>
                    <p class="text-3xl font-bold mt-2">@turnos.Count(t => t.Estado == "Confirmed")</p>
                </div>
                <svg class="w-12 h-12 text-green-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
            </div>
        </div>

        <div class="bg-gradient-to-br from-indigo-500 to-purple-600 rounded-2xl p-6 text-white shadow-xl">
            <div class="flex items-center justify-between">
                <div>
                    <p class="text-indigo-100 text-sm">Completados</p>
                    <p class="text-3xl font-bold mt-2">@turnos.Count(t => t.Estado == "Completed")</p>
                </div>
                <svg class="w-12 h-12 text-indigo-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                </svg>
            </div>
        </div>

        <div class="bg-gradient-to-br from-red-500 to-pink-600 rounded-2xl p-6 text-white shadow-xl">
            <div class="flex items-center justify-between">
                <div>
                    <p class="text-red-100 text-sm">Cancelados</p>
                    <p class="text-3xl font-bold mt-2">@turnos.Count(t => t.Estado == "Cancelled")</p>
                </div>
                <svg class="w-12 h-12 text-red-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
            </div>
        </div>
    </div>

    <!-- Filtros -->
    <div class="bg-white/95 backdrop-blur-sm rounded-2xl shadow-xl p-6 mb-6 border border-gray-100">
        <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">Fecha</label>
                <input type="date" @bind="fechaFiltro" @bind:event="oninput"
                       class="w-full px-4 py-3 border-2 border-gray-300 rounded-xl focus:ring-4 focus:ring-cyan-500/20 focus:border-cyan-500 transition-all duration-300 bg-gray-50/50 focus:bg-white" />
            </div>
            <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">Estado</label>
                <select @bind="estadoFiltro"
                        class="w-full px-4 py-3 border-2 border-gray-300 rounded-xl focus:ring-4 focus:ring-cyan-500/20 focus:border-cyan-500 transition-all duration-300 bg-gray-50/50 focus:bg-white">
                    <option value="">Todos los estados</option>
                    <option value="Scheduled">Agendados</option>
                    <option value="Confirmed">Confirmados</option>
                    <option value="Completed">Completados</option>
                    <option value="Cancelled">Cancelados</option>
                </select>
            </div>
            <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">Profesional</label>
                <select @bind="profesionalFiltro"
                        class="w-full px-4 py-3 border-2 border-gray-300 rounded-xl focus:ring-4 focus:ring-cyan-500/20 focus:border-cyan-500 transition-all duration-300 bg-gray-50/50 focus:bg-white">
                    <option value="">Todos</option>
                    <option value="Dr. Juan Pérez">Dr. Juan Pérez</option>
                    <option value="Dra. Ana García">Dra. Ana García</option>
                </select>
            </div>
        </div>
    </div>

    <!-- Timeline de turnos -->
    <div class="bg-white/95 backdrop-blur-sm rounded-2xl shadow-xl overflow-hidden border border-gray-100">
        <div class="px-6 py-4 bg-gradient-to-r from-cyan-600 to-blue-600 border-b border-gray-200">
            <h3 class="text-lg font-semibold text-white">Turnos del Día - @fechaFiltro.ToString("dddd, dd MMMM yyyy")</h3>
        </div>

        <div class="p-6">
            @if (!TurnosFiltrados.Any())
            {
                <div class="text-center py-12">
                    <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                    </svg>
                    <h3 class="mt-2 text-sm font-medium text-gray-900">No hay turnos</h3>
                    <p class="mt-1 text-sm text-gray-500">No se encontraron turnos para esta fecha.</p>
                </div>
            }
            else
            {
                <div class="space-y-4">
                    @foreach (var turno in TurnosFiltrados.OrderBy(t => t.HoraInicio))
                    {
                        <div class="flex gap-4 p-4 rounded-xl border-2 @ObtenerClaseBorde(turno.Estado) hover:shadow-lg transition-all duration-300">
                            <!-- Hora -->
                            <div class="flex-shrink-0 w-24 text-center">
                                <div class="text-2xl font-bold @ObtenerColorTexto(turno.Estado)">
                                    @turno.HoraInicio.ToString("HH:mm")
                                </div>
                                <div class="text-xs text-gray-500">
                                    @turno.Duracion min
                                </div>
                            </div>

                            <!-- Línea vertical -->
                            <div class="w-0.5 bg-gray-300"></div>

                            <!-- Información del turno -->
                            <div class="flex-1 grid grid-cols-1 md:grid-cols-3 gap-4">
                                <div>
                                    <p class="text-sm text-gray-600">Cliente</p>
                                    <p class="font-semibold text-gray-900">@turno.ClienteNombre</p>
                                </div>
                                <div>
                                    <p class="text-sm text-gray-600">Servicio</p>
                                    <p class="font-semibold text-gray-900">@turno.Servicio</p>
                                </div>
                                <div>
                                    <p class="text-sm text-gray-600">Profesional</p>
                                    <p class="font-semibold text-gray-900">@turno.Profesional</p>
                                </div>
                            </div>

                            <!-- Estado y acciones -->
                            <div class="flex items-center gap-3">
                                <span class="px-3 py-1 rounded-full text-sm font-semibold @ObtenerBadgeEstado(turno.Estado)">
                                    @ObtenerTextoEstado(turno.Estado)
                                </span>

                                <div class="flex gap-2">
                                    @if (turno.Estado == "Scheduled" && HasPermission(Permission.ConfirmAppointment))
                                    {
                                        <button @onclick="() => ConfirmarTurno(turno)"
                                                class="p-2 text-green-600 hover:bg-green-50 rounded-lg transition-all duration-300 transform hover:scale-110"
                                                title="Confirmar">
                                            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                                            </svg>
                                        </button>
                                    }
                                    @if (turno.Estado == "Confirmed" && HasPermission(Permission.CompleteAppointment))
                                    {
                                        <button @onclick="() => CompletarTurno(turno)"
                                                class="p-2 text-blue-600 hover:bg-blue-50 rounded-lg transition-all duration-300 transform hover:scale-110"
                                                title="Completar">
                                            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                                            </svg>
                                        </button>
                                    }
                                    @if (HasPermission(Permission.EditAppointment))
                                    {
                                        <button class="p-2 text-yellow-600 hover:bg-yellow-50 rounded-lg transition-all duration-300 transform hover:scale-110"
                                                title="Editar">
                                            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                                            </svg>
                                        </button>
                                    }
                                    @if (turno.Estado != "Cancelled" && HasPermission(Permission.CancelAppointment))
                                    {
                                        <button @onclick="() => CancelarTurno(turno)"
                                                class="p-2 text-red-600 hover:bg-red-50 rounded-lg transition-all duration-300 transform hover:scale-110"
                                                title="Cancelar">
                                            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z" />
                                            </svg>
                                        </button>
                                    }
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
    </div>

    <!-- Modal de Formulario -->
    @if (mostrarFormulario)
    {
        <div class="fixed inset-0 bg-black/60 backdrop-blur-sm flex items-center justify-center z-50 p-4">
            <div class="bg-white/95 backdrop-blur-sm rounded-2xl p-6 w-full max-w-2xl max-h-[90vh] overflow-y-auto shadow-2xl border border-gray-100 transform transition-all">
                <div class="flex justify-between items-center mb-6">
                    <h2 class="text-2xl font-bold text-gray-900">Agendar Nuevo Turno</h2>
                    <button @onclick="CancelarFormulario"
                            class="text-gray-500 hover:text-gray-700 transition-colors">
                        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                        </svg>
                    </button>
                </div>

                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Cliente</label>
                        <select @bind="nuevoTurno.ClienteNombre"
                                class="w-full px-4 py-3 border-2 border-gray-300 rounded-xl focus:ring-4 focus:ring-cyan-500/20 focus:border-cyan-500 transition-all duration-300 bg-gray-50/50 focus:bg-white">
                            <option value="">Seleccionar cliente...</option>
                            <option value="María González">María González</option>
                            <option value="Carlos Pérez">Carlos Pérez</option>
                            <option value="Ana Martínez">Ana Martínez</option>
                        </select>
                    </div>

                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Servicio/Tratamiento</label>
                        <select @bind="nuevoTurno.Servicio"
                                class="w-full px-4 py-3 border-2 border-gray-300 rounded-xl focus:ring-4 focus:ring-cyan-500/20 focus:border-cyan-500 transition-all duration-300 bg-gray-50/50 focus:bg-white">
                            <option value="">Seleccionar servicio...</option>
                            <option value="Limpieza Facial Profunda">Limpieza Facial Profunda</option>
                            <option value="Peeling Químico">Peeling Químico</option>
                            <option value="Depilación Definitiva - Piernas">Depilación Definitiva - Piernas</option>
                        </select>
                    </div>

                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Profesional</label>
                        <select @bind="nuevoTurno.Profesional"
                                class="w-full px-4 py-3 border-2 border-gray-300 rounded-xl focus:ring-4 focus:ring-cyan-500/20 focus:border-cyan-500 transition-all duration-300 bg-gray-50/50 focus:bg-white">
                            <option value="">Asignar profesional...</option>
                            <option value="Dr. Juan Pérez">Dr. Juan Pérez</option>
                            <option value="Dra. Ana García">Dra. Ana García</option>
                        </select>
                    </div>

                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Fecha</label>
                        <input type="date" @bind="nuevoTurno.Fecha"
                               class="w-full px-4 py-3 border-2 border-gray-300 rounded-xl focus:ring-4 focus:ring-cyan-500/20 focus:border-cyan-500 transition-all duration-300 bg-gray-50/50 focus:bg-white" />
                    </div>

                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Hora Inicio</label>
                        <input type="time" @bind="nuevoTurno.HoraInicio"
                               class="w-full px-4 py-3 border-2 border-gray-300 rounded-xl focus:ring-4 focus:ring-cyan-500/20 focus:border-cyan-500 transition-all duration-300 bg-gray-50/50 focus:bg-white" />
                    </div>

                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Duración (minutos)</label>
                        <input type="number" @bind="nuevoTurno.Duracion"
                               class="w-full px-4 py-3 border-2 border-gray-300 rounded-xl focus:ring-4 focus:ring-cyan-500/20 focus:border-cyan-500 transition-all duration-300 bg-gray-50/50 focus:bg-white"
                               placeholder="60" />
                    </div>

                    <div class="md:col-span-2">
                        <label class="block text-sm font-medium text-gray-700 mb-2">Notas</label>
                        <textarea @bind="nuevoTurno.Notas" rows="3"
                                  class="w-full px-4 py-3 border-2 border-gray-300 rounded-xl focus:ring-4 focus:ring-cyan-500/20 focus:border-cyan-500 transition-all duration-300 bg-gray-50/50 focus:bg-white"
                                  placeholder="Observaciones o preparación especial"></textarea>
                    </div>
                </div>

                <div class="flex justify-end gap-3 mt-6 pt-6 border-t border-gray-200">
                    <button @onclick="CancelarFormulario"
                            class="px-6 py-3 border-2 border-gray-300 rounded-xl hover:bg-gray-50 hover:border-gray-400 transition-all duration-300 text-gray-700 font-medium">
                        Cancelar
                    </button>
                    <button @onclick="GuardarTurno"
                            class="px-6 py-3 bg-gradient-to-r from-cyan-600 to-blue-600 text-white rounded-xl hover:from-cyan-700 hover:to-blue-700 transition-all duration-300 transform hover:scale-105 shadow-lg hover:shadow-xl font-medium">
                        Agendar Turno
                    </button>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private List<TurnoDto> turnos = new();
    private TurnoDto nuevoTurno = new();
    private bool mostrarFormulario = false;
    private DateTime fechaFiltro = DateTime.Today;
    private string estadoFiltro = "";
    private string profesionalFiltro = "";

    protected override void OnInitialized()
    {
        base.OnInitialized();

        var hoy = DateTime.Today;
        turnos = new List<TurnoDto>
        {
            new TurnoDto { ClienteNombre = "María González", Servicio = "Limpieza Facial Profunda", Profesional = "Dr. Juan Pérez", Fecha = hoy, HoraInicio = new TimeOnly(9, 0), Duracion = 60, Estado = "Confirmed", Notas = "" },
            new TurnoDto { ClienteNombre = "Carlos Pérez", Servicio = "Depilación Definitiva - Piernas", Profesional = "Dra. Ana García", Fecha = hoy, HoraInicio = new TimeOnly(10, 30), Duracion = 90, Estado = "Scheduled", Notas = "Primera sesión" },
            new TurnoDto { ClienteNombre = "Ana Martínez", Servicio = "Peeling Químico", Profesional = "Dr. Juan Pérez", Fecha = hoy, HoraInicio = new TimeOnly(14, 0), Duracion = 45, Estado = "Confirmed", Notas = "" },
            new TurnoDto { ClienteNombre = "Laura Rodríguez", Servicio = "Limpieza Facial", Profesional = "Dra. Ana García", Fecha = hoy, HoraInicio = new TimeOnly(15, 30), Duracion = 60, Estado = "Scheduled", Notas = "" },
            new TurnoDto { ClienteNombre = "Pedro Sánchez", Servicio = "Tratamiento Corporal", Profesional = "Dr. Juan Pérez", Fecha = hoy, HoraInicio = new TimeOnly(17, 0), Duracion = 75, Estado = "Cancelled", Notas = "Cliente canceló" }
        };
    }

    private List<TurnoDto> TurnosFiltrados
    {
        get
        {
            var resultado = turnos.Where(t => t.Fecha.Date == fechaFiltro.Date);

            if (!string.IsNullOrWhiteSpace(estadoFiltro))
                resultado = resultado.Where(t => t.Estado == estadoFiltro);

            if (!string.IsNullOrWhiteSpace(profesionalFiltro))
                resultado = resultado.Where(t => t.Profesional == profesionalFiltro);

            return resultado.ToList();
        }
    }

    private void MostrarFormularioNuevo()
    {
        nuevoTurno = new TurnoDto
        {
            Fecha = fechaFiltro,
            Duracion = 60,
            Estado = "Scheduled",
            Profesional = CurrentUser.UserRole == "Professional" ? CurrentUser.FullName : ""
        };
        mostrarFormulario = true;
    }

    private void GuardarTurno()
    {
        if (!string.IsNullOrWhiteSpace(nuevoTurno.ClienteNombre) && !string.IsNullOrWhiteSpace(nuevoTurno.Servicio))
        {
            turnos.Add(nuevoTurno);
            mostrarFormulario = false;
            nuevoTurno = new TurnoDto();
        }
    }

    private void CancelarFormulario()
    {
        mostrarFormulario = false;
        nuevoTurno = new TurnoDto();
    }

    private void ConfirmarTurno(TurnoDto turno)
    {
        turno.Estado = "Confirmed";
    }

    private void CompletarTurno(TurnoDto turno)
    {
        turno.Estado = "Completed";
    }

    private void CancelarTurno(TurnoDto turno)
    {
        turno.Estado = "Cancelled";
    }

    private string ObtenerBadgeEstado(string estado) => estado switch
    {
        "Scheduled" => "bg-blue-100 text-blue-800",
        "Confirmed" => "bg-green-100 text-green-800",
        "Completed" => "bg-indigo-100 text-indigo-800",
        "Cancelled" => "bg-red-100 text-red-800",
        _ => "bg-gray-100 text-gray-800"
    };

    private string ObtenerTextoEstado(string estado) => estado switch
    {
        "Scheduled" => "Agendado",
        "Confirmed" => "Confirmado",
        "Completed" => "Completado",
        "Cancelled" => "Cancelado",
        _ => estado
    };

    private string ObtenerClaseBorde(string estado) => estado switch
    {
        "Scheduled" => "border-blue-300",
        "Confirmed" => "border-green-300",
        "Completed" => "border-indigo-300",
        "Cancelled" => "border-red-300",
        _ => "border-gray-300"
    };

    private string ObtenerColorTexto(string estado) => estado switch
    {
        "Scheduled" => "text-blue-600",
        "Confirmed" => "text-green-600",
        "Completed" => "text-indigo-600",
        "Cancelled" => "text-red-600",
        _ => "text-gray-600"
    };

    public class TurnoDto
    {
        public string ClienteNombre { get; set; } = "";
        public string Servicio { get; set; } = "";
        public string Profesional { get; set; } = "";
        public DateTime Fecha { get; set; }
        public TimeOnly HoraInicio { get; set; } = new TimeOnly(9, 0);
        public int Duracion { get; set; }
        public string Estado { get; set; } = "Scheduled";
        public string? Notas { get; set; }
    }
}