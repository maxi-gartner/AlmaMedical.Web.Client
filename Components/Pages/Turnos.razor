@page "/turnos"
@rendermode InteractiveServer
@inherits AlmaMedical.Web.Client.Base.AuthorizedComponentBase
@using AlmaMedical.Web.Client.Services
@using static AlmaMedical.Web.Client.Services.RolePermissionService

<PageTitle>Turnos - ALMA Medical</PageTitle>

<div class="min-h-screen bg-gray-50/50">
    <!-- Header -->
    <div class="bg-white/95 backdrop-blur-sm rounded-2xl shadow-xl p-6 mb-6 border border-gray-100">
        <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
            <div>
                <h1 class="text-3xl font-bold bg-gradient-to-r from-cyan-600 to-blue-600 bg-clip-text text-transparent">
                    Agenda de Turnos
                </h1>
                <p class="text-gray-600 mt-1">Gestiona citas y reservas de tratamientos</p>
            </div>
            <div class="flex gap-3">
                @if (HasPermission(Permission.ViewAppointments))
                {
                    <button @onclick="() => mostrarTareasPendientes = true"
                            class="relative bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 text-white px-6 py-3 rounded-xl flex items-center gap-2 transition-all duration-300 transform hover:scale-105 shadow-lg hover:shadow-xl">
                        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
                        </svg>
                        Tareas Pendientes
                        @if (TotalTareasPendientes > 0)
                        {
                            <span class="absolute -top-2 -right-2 bg-red-500 text-white text-xs font-bold rounded-full h-6 w-6 flex items-center justify-center animate-pulse">
                                @TotalTareasPendientes
                            </span>
                        }
                    </button>
                }
                @if (HasPermission(Permission.CreateAppointment))
                {
                    <button @onclick="MostrarFormularioNuevo"
                            class="bg-gradient-to-r from-cyan-600 to-blue-600 hover:from-cyan-700 hover:to-blue-700 text-white px-6 py-3 rounded-xl flex items-center gap-2 transition-all duration-300 transform hover:scale-105 shadow-lg hover:shadow-xl">
                        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                        </svg>
                        Nuevo Turno
                    </button>
                }
            </div>
        </div>
    </div>

    <!-- Estadísticas del día -->
    <div class="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
        <div class="bg-gradient-to-br from-blue-500 to-cyan-600 rounded-2xl p-6 text-white shadow-xl">
            <div class="flex items-center justify-between">
                <div>
                    <p class="text-blue-100 text-sm">Agendados Hoy</p>
                    <p class="text-3xl font-bold mt-2">@turnos.Count(t => t.Estado == "Scheduled")</p>
                </div>
                <svg class="w-12 h-12 text-blue-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                </svg>
            </div>
        </div>

        <div class="bg-gradient-to-br from-green-500 to-emerald-600 rounded-2xl p-6 text-white shadow-xl">
            <div class="flex items-center justify-between">
                <div>
                    <p class="text-green-100 text-sm">Confirmados</p>
                    <p class="text-3xl font-bold mt-2">@turnos.Count(t => t.Estado == "Confirmed")</p>
                </div>
                <svg class="w-12 h-12 text-green-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
            </div>
        </div>

        <div class="bg-gradient-to-br from-indigo-500 to-purple-600 rounded-2xl p-6 text-white shadow-xl">
            <div class="flex items-center justify-between">
                <div>
                    <p class="text-indigo-100 text-sm">Completados</p>
                    <p class="text-3xl font-bold mt-2">@turnos.Count(t => t.Estado == "Completed")</p>
                </div>
                <svg class="w-12 h-12 text-indigo-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                </svg>
            </div>
        </div>

        <div class="bg-gradient-to-br from-red-500 to-pink-600 rounded-2xl p-6 text-white shadow-xl">
            <div class="flex items-center justify-between">
                <div>
                    <p class="text-red-100 text-sm">Cancelados</p>
                    <p class="text-3xl font-bold mt-2">@turnos.Count(t => t.Estado == "Cancelled")</p>
                </div>
                <svg class="w-12 h-12 text-red-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
            </div>
        </div>
    </div>

    <!-- Filtros -->
    <div class="bg-white/95 backdrop-blur-sm rounded-2xl shadow-xl p-6 mb-6 border border-gray-100">
        <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">Fecha</label>
                <input type="date" @bind="fechaFiltro" @bind:event="oninput"
                       class="w-full px-4 py-3 border-2 border-gray-300 rounded-xl focus:ring-4 focus:ring-cyan-500/20 focus:border-cyan-500 transition-all duration-300 bg-gray-50/50 focus:bg-white" />
            </div>
            <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">Estado</label>
                <select @bind="estadoFiltro"
                        class="w-full px-4 py-3 border-2 border-gray-300 rounded-xl focus:ring-4 focus:ring-cyan-500/20 focus:border-cyan-500 transition-all duration-300 bg-gray-50/50 focus:bg-white">
                    <option value="">Todos los estados</option>
                    <option value="Scheduled">Agendados</option>
                    <option value="Confirmed">Confirmados</option>
                    <option value="Completed">Completados</option>
                    <option value="Cancelled">Cancelados</option>
                </select>
            </div>
            <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">Profesional</label>
                <select @bind="profesionalFiltro"
                        class="w-full px-4 py-3 border-2 border-gray-300 rounded-xl focus:ring-4 focus:ring-cyan-500/20 focus:border-cyan-500 transition-all duration-300 bg-gray-50/50 focus:bg-white">
                    <option value="">Todos</option>
                    <option value="Dr. Juan Pérez">Dr. Juan Pérez</option>
                    <option value="Dra. Ana García">Dra. Ana García</option>
                </select>
            </div>
        </div>
    </div>

    <!-- Timeline de turnos -->
    <div class="bg-white/95 backdrop-blur-sm rounded-2xl shadow-xl overflow-hidden border border-gray-100">
        <div class="px-6 py-4 bg-gradient-to-r from-cyan-600 to-blue-600 border-b border-gray-200">
            <h3 class="text-lg font-semibold text-white">Turnos del Día - @fechaFiltro.ToString("dddd, dd MMMM yyyy")</h3>
        </div>

        <div class="p-6">
            @if (!TurnosFiltrados.Any())
            {
                <div class="text-center py-12">
                    <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                    </svg>
                    <h3 class="mt-2 text-sm font-medium text-gray-900">No hay turnos</h3>
                    <p class="mt-1 text-sm text-gray-500">No se encontraron turnos para esta fecha.</p>
                </div>
            }
            else
            {
                <div class="space-y-4">
                    @foreach (var turno in TurnosFiltrados.OrderBy(t => t.HoraInicio))
                    {
                        <div class="relative flex gap-4 p-4 rounded-xl border-2 @ObtenerClaseBorde(turno.Estado) hover:shadow-lg transition-all duration-300">
                            <!-- 🆕 INDICADOR DE TAREAS PENDIENTES -->
                            @if (turno.TareasPendientes > 0)
                            {
                                <div class="absolute -top-2 -right-2 z-10">
                                    <span class="bg-red-500 text-white text-xs font-bold rounded-full h-8 w-8 flex items-center justify-center shadow-lg animate-pulse">
                                        @turno.TareasPendientes
                                        <span class="sr-only">tareas pendientes</span>
                                    </span>
                                </div>
                            }

                            <!-- Hora -->
                            <div class="flex-shrink-0 w-24 text-center">
                                <div class="text-2xl font-bold @ObtenerColorTexto(turno.Estado)">
                                    @turno.HoraInicio.ToString("HH:mm")
                                </div>
                                <div class="text-xs text-gray-500">
                                    @turno.Duracion min
                                </div>
                            </div>

                            <!-- Línea vertical -->
                            <div class="w-0.5 bg-gray-300"></div>

                            <!-- Información del turno -->
                            <div class="flex-1">
                                <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
                                    <div>
                                        <p class="text-sm text-gray-600">Cliente</p>
                                        <p class="font-semibold text-gray-900">@turno.ClienteNombre</p>
                                    </div>
                                    <div>
                                        <p class="text-sm text-gray-600">Servicio</p>
                                        <p class="font-semibold text-gray-900">@turno.Servicio</p>
                                    </div>
                                    <div>
                                        <p class="text-sm text-gray-600">Profesional</p>
                                        <p class="font-semibold text-gray-900">@turno.Profesional</p>
                                    </div>
                                </div>

                                <!-- 🆕 SECCIÓN DE TAREAS -->
                                @if (turno.Tareas.Any())
                                {
                                    <div class="mb-4 p-4 bg-yellow-50 border-l-4 border-yellow-400 rounded-lg">
                                        <div class="flex items-center justify-between mb-2">
                                            <h4 class="text-sm font-semibold text-yellow-800 flex items-center gap-2">
                                                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
                                                </svg>
                                                Tareas para este turno (@turno.TareasPendientes pendientes)
                                            </h4>
                                            <button @onclick="() => AbrirModalTareas(turno)"
                                                    class="text-xs text-yellow-700 hover:text-yellow-900 underline">
                                                Ver todas
                                            </button>
                                        </div>
                                        <ul class="space-y-1">
                                            @foreach (var tarea in turno.Tareas.Take(3))
                                            {
                                                <li class="flex items-start gap-2 text-sm">
                                                    <input type="checkbox"
                                                           checked="@(tarea.Estado == TareaEstado.Completada)"
                                                           @onchange="() => CompletarTarea(tarea)"
                                                           class="mt-1 rounded border-gray-300 text-yellow-600 focus:ring-yellow-500" />
                                                    <span class="@(tarea.Estado == TareaEstado.Completada ? "line-through text-gray-500" : "text-gray-700")">
                                                        @tarea.Titulo
                                                        @if (tarea.Prioridad == TareaPrioridad.Urgente)
                                                        {
                                                            <span class="ml-2 text-red-600 font-bold">⚠️ URGENTE</span>
                                                        }
                                                        else if (tarea.Prioridad == TareaPrioridad.Alta)
                                                        {
                                                            <span class="ml-2 text-orange-600">❗ Alta</span>
                                                        }
                                                    </span>
                                                </li>
                                            }
                                        </ul>
                                        @if (turno.Tareas.Count > 3)
                                        {
                                            <p class="text-xs text-yellow-700 mt-2">
                                                + @(turno.Tareas.Count - 3) tareas más...
                                            </p>
                                        }
                                    </div>
                                }

                                <!-- Estado y Notas -->
                                <div class="flex items-center justify-between">
                                    <div class="flex items-center gap-2">
                                        <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium @ObtenerBadgeEstado(turno.Estado)">
                                            @ObtenerTextoEstado(turno.Estado)
                                        </span>
                                        @if (!string.IsNullOrEmpty(turno.Notas))
                                        {
                                            <span class="text-sm text-gray-500" title="@turno.Notas">
                                                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 8h10M7 12h4m1 8l-4-4H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-3l-4 4z" />
                                                </svg>
                                            </span>
                                        }
                                    </div>

                                    <!-- Acciones -->
                                    <div class="flex gap-2">
                                        <!-- 🆕 Botón de Tareas -->
                                        <button @onclick="() => AbrirModalTareas(turno)"
                                                class="p-2 text-purple-600 hover:bg-purple-50 rounded-lg transition-all duration-300 relative"
                                                title="Gestionar tareas">
                                            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
                                            </svg>
                                            @if (turno.TareasPendientes > 0)
                                            {
                                                <span class="absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full h-4 w-4 flex items-center justify-center">
                                                    @turno.TareasPendientes
                                                </span>
                                            }
                                        </button>

                                        @if (HasPermission(Permission.UpdateAppointment))
                                        {
                                            @if (turno.Estado == "Scheduled")
                                            {
                                                <button @onclick="() => ConfirmarTurno(turno)"
                                                        class="p-2 text-green-600 hover:bg-green-50 rounded-lg transition-all duration-300"
                                                        title="Confirmar">
                                                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                                                    </svg>
                                                </button>
                                            }
                                            @if (turno.Estado == "Confirmed")
                                            {
                                                <button @onclick="() => CompletarTurno(turno)"
                                                        class="p-2 text-indigo-600 hover:bg-indigo-50 rounded-lg transition-all duration-300"
                                                        title="Completar">
                                                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                                                    </svg>
                                                </button>
                                            }
                                            @if (turno.Estado != "Cancelled" && turno.Estado != "Completed")
                                            {
                                                <button @onclick="() => CancelarTurno(turno)"
                                                        class="p-2 text-red-600 hover:bg-red-50 rounded-lg transition-all duration-300"
                                                        title="Cancelar">
                                                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                                                    </svg>
                                                </button>
                                            }
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
    </div>

    <!-- 🆕 MODAL: Formulario Nuevo Turno -->
    @if (mostrarFormulario)
    {
        <div class="fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-50 p-4">
            <div class="bg-white rounded-2xl shadow-2xl max-w-3xl w-full max-h-[90vh] overflow-y-auto">
                <div class="sticky top-0 bg-gradient-to-r from-cyan-600 to-blue-600 text-white px-6 py-4 rounded-t-2xl">
                    <h2 class="text-2xl font-bold">Nuevo Turno</h2>
                </div>

                <div class="p-6">
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Cliente *</label>
                            <input type="text" @bind="nuevoTurno.ClienteNombre"
                                   class="w-full px-4 py-3 border-2 border-gray-300 rounded-xl focus:ring-4 focus:ring-cyan-500/20 focus:border-cyan-500 transition-all duration-300 bg-gray-50/50 focus:bg-white"
                                   placeholder="Nombre completo" />
                        </div>

                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Servicio *</label>
                            <select @bind="nuevoTurno.Servicio"
                                    class="w-full px-4 py-3 border-2 border-gray-300 rounded-xl focus:ring-4 focus:ring-cyan-500/20 focus:border-cyan-500 transition-all duration-300 bg-gray-50/50 focus:bg-white">
                                <option value="">Seleccione un servicio</option>
                                <option value="Limpieza Facial Profunda">Limpieza Facial Profunda</option>
                                <option value="Peeling Químico">Peeling Químico</option>
                                <option value="Depilación Definitiva">Depilación Definitiva</option>
                                <option value="Tratamiento Corporal">Tratamiento Corporal</option>
                            </select>
                        </div>

                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Profesional</label>
                            <select @bind="nuevoTurno.Profesional"
                                    class="w-full px-4 py-3 border-2 border-gray-300 rounded-xl focus:ring-4 focus:ring-cyan-500/20 focus:border-cyan-500 transition-all duration-300 bg-gray-50/50 focus:bg-white">
                                <option value="">Seleccione profesional</option>
                                <option value="Dr. Juan Pérez">Dr. Juan Pérez</option>
                                <option value="Dra. Ana García">Dra. Ana García</option>
                            </select>
                        </div>

                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Fecha</label>
                            <input type="date" @bind="nuevoTurno.Fecha"
                                   class="w-full px-4 py-3 border-2 border-gray-300 rounded-xl focus:ring-4 focus:ring-cyan-500/20 focus:border-cyan-500 transition-all duration-300 bg-gray-50/50 focus:bg-white" />
                        </div>

                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Hora de inicio</label>
                            <input type="time" @bind="nuevoTurno.HoraInicio"
                                   class="w-full px-4 py-3 border-2 border-gray-300 rounded-xl focus:ring-4 focus:ring-cyan-500/20 focus:border-cyan-500 transition-all duration-300 bg-gray-50/50 focus:bg-white" />
                        </div>

                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Duración (minutos)</label>
                            <input type="number" @bind="nuevoTurno.Duracion"
                                   class="w-full px-4 py-3 border-2 border-gray-300 rounded-xl focus:ring-4 focus:ring-cyan-500/20 focus:border-cyan-500 transition-all duration-300 bg-gray-50/50 focus:bg-white"
                                   placeholder="60" />
                        </div>

                        <div class="md:col-span-2">
                            <label class="block text-sm font-medium text-gray-700 mb-2">Notas</label>
                            <textarea @bind="nuevoTurno.Notas" rows="3"
                                      class="w-full px-4 py-3 border-2 border-gray-300 rounded-xl focus:ring-4 focus:ring-cyan-500/20 focus:border-cyan-500 transition-all duration-300 bg-gray-50/50 focus:bg-white"
                                      placeholder="Observaciones o preparación especial"></textarea>
                        </div>
                    </div>

                    <div class="flex justify-end gap-3 mt-6 pt-6 border-t border-gray-200">
                        <button @onclick="CancelarFormulario"
                                class="px-6 py-3 border-2 border-gray-300 rounded-xl hover:bg-gray-50 hover:border-gray-400 transition-all duration-300 text-gray-700 font-medium">
                            Cancelar
                        </button>
                        <button @onclick="GuardarTurno"
                                class="px-6 py-3 bg-gradient-to-r from-cyan-600 to-blue-600 text-white rounded-xl hover:from-cyan-700 hover:to-blue-700 transition-all duration-300 transform hover:scale-105 shadow-lg hover:shadow-xl font-medium">
                            Agendar Turno
                        </button>
                    </div>
                </div>
            </div>
        </div>
    }

    <!-- 🆕 MODAL: Gestión de Tareas del Turno -->
    @if (mostrarModalTareas && turnoSeleccionado != null)
    {
        <div class="fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-50 p-4">
            <div class="bg-white rounded-2xl shadow-2xl max-w-4xl w-full max-h-[90vh] overflow-y-auto">
                <div class="sticky top-0 bg-gradient-to-r from-purple-600 to-pink-600 text-white px-6 py-4 rounded-t-2xl">
                    <div class="flex items-center justify-between">
                        <div>
                            <h2 class="text-2xl font-bold">Tareas del Turno</h2>
                            <p class="text-purple-100 text-sm mt-1">
                                @turnoSeleccionado.ClienteNombre - @turnoSeleccionado.Fecha.ToString("dd/MM/yyyy") @turnoSeleccionado.HoraInicio.ToString("HH:mm")
                            </p>
                        </div>
                        <button @onclick="CerrarModalTareas"
                                class="text-white hover:bg-white/20 rounded-lg p-2 transition-all">
                            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                            </svg>
                        </button>
                    </div>
                </div>

                <div class="p-6">
                    <!-- Botón Nueva Tarea -->
                    <button @onclick="MostrarFormularioNuevaTarea"
                            class="w-full mb-6 bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 text-white px-6 py-3 rounded-xl flex items-center justify-center gap-2 transition-all duration-300 transform hover:scale-105 shadow-lg">
                        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
                        </svg>
                        Nueva Tarea
                    </button>

                    <!-- Formulario Nueva Tarea -->
                    @if (mostrarFormularioTarea)
                    {
                        <div class="mb-6 p-6 bg-purple-50 border-2 border-purple-200 rounded-xl">
                            <h3 class="text-lg font-semibold text-purple-900 mb-4">Crear Nueva Tarea</h3>
                            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                                <div class="md:col-span-2">
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Título *</label>
                                    <input type="text" @bind="nuevaTarea.Titulo"
                                           class="w-full px-4 py-3 border-2 border-gray-300 rounded-xl focus:ring-4 focus:ring-purple-500/20 focus:border-purple-500 transition-all bg-white"
                                           placeholder="Ej: Confirmar que traiga estudios de laboratorio" />
                                </div>

                                <div class="md:col-span-2">
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Descripción</label>
                                    <textarea @bind="nuevaTarea.Descripcion" rows="2"
                                              class="w-full px-4 py-3 border-2 border-gray-300 rounded-xl focus:ring-4 focus:ring-purple-500/20 focus:border-purple-500 transition-all bg-white"
                                              placeholder="Detalles adicionales..."></textarea>
                                </div>

                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Tipo</label>
                                    <select @bind="nuevaTarea.Tipo"
                                            class="w-full px-4 py-3 border-2 border-gray-300 rounded-xl focus:ring-4 focus:ring-purple-500/20 focus:border-purple-500 transition-all bg-white">
                                        <option value="@TareaTipo.AntesDelTurno">Antes del turno</option>
                                        <option value="@TareaTipo.DespuesDelTurno">Después del turno</option>
                                        <option value="@TareaTipo.Administrativo">Trámite administrativo</option>
                                        <option value="@TareaTipo.Seguimiento">Seguimiento</option>
                                    </select>
                                </div>

                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Prioridad</label>
                                    <select @bind="nuevaTarea.Prioridad"
                                            class="w-full px-4 py-3 border-2 border-gray-300 rounded-xl focus:ring-4 focus:ring-purple-500/20 focus:border-purple-500 transition-all bg-white">
                                        <option value="@TareaPrioridad.Baja">Baja</option>
                                        <option value="@TareaPrioridad.Normal">Normal</option>
                                        <option value="@TareaPrioridad.Alta">Alta</option>
                                        <option value="@TareaPrioridad.Urgente">Urgente</option>
                                    </select>
                                </div>
                            </div>

                            <div class="flex justify-end gap-3 mt-4">
                                <button @onclick="CancelarFormularioTarea"
                                        class="px-4 py-2 border-2 border-gray-300 rounded-xl hover:bg-gray-50 transition-all text-gray-700">
                                    Cancelar
                                </button>
                                <button @onclick="GuardarTarea"
                                        class="px-4 py-2 bg-purple-600 hover:bg-purple-700 text-white rounded-xl transition-all">
                                    Guardar Tarea
                                </button>
                            </div>
                        </div>
                    }

                    <!-- Lista de Tareas -->
                    @if (!turnoSeleccionado.Tareas.Any())
                    {
                        <div class="text-center py-12">
                            <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
                            </svg>
                            <h3 class="mt-2 text-sm font-medium text-gray-900">No hay tareas</h3>
                            <p class="mt-1 text-sm text-gray-500">Crea la primera tarea para este turno</p>
                        </div>
                    }
                    else
                    {
                        <div class="space-y-3">
                            @foreach (var tarea in turnoSeleccionado.Tareas.OrderBy(t => t.Estado).ThenByDescending(t => t.Prioridad))
                            {
                                <div class="p-4 border-2 @ObtenerBordeTarea(tarea.Prioridad, tarea.Estado) rounded-xl @(tarea.Estado == TareaEstado.Completada ? "bg-gray-50" : "bg-white")">
                                    <div class="flex items-start gap-3">
                                        <input type="checkbox"
                                               checked="@(tarea.Estado == TareaEstado.Completada)"
                                               @onchange="() => CompletarTarea(tarea)"
                                               class="mt-1 h-5 w-5 rounded border-gray-300 text-purple-600 focus:ring-purple-500" />

                                        <div class="flex-1">
                                            <div class="flex items-start justify-between gap-2">
                                                <div class="flex-1">
                                                    <h4 class="font-semibold @(tarea.Estado == TareaEstado.Completada ? "line-through text-gray-500" : "text-gray-900")">
                                                        @tarea.Titulo
                                                    </h4>
                                                    @if (!string.IsNullOrEmpty(tarea.Descripcion))
                                                    {
                                                        <p class="text-sm text-gray-600 mt-1 @(tarea.Estado == TareaEstado.Completada ? "line-through" : "")">
                                                            @tarea.Descripcion
                                                        </p>
                                                    }
                                                </div>

                                                <div class="flex items-center gap-2">
                                                    <span class="@ObtenerBadgePrioridad(tarea.Prioridad)">
                                                        @ObtenerTextoPrioridad(tarea.Prioridad)
                                                    </span>
                                                    <button @onclick="() => EliminarTarea(tarea)"
                                                            class="text-red-600 hover:bg-red-50 p-1 rounded transition-all">
                                                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                                                        </svg>
                                                    </button>
                                                </div>
                                            </div>

                                            <div class="flex items-center gap-4 mt-2 text-xs text-gray-500">
                                                <span class="flex items-center gap-1">
                                                    <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z" />
                                                    </svg>
                                                    @ObtenerTextoTipo(tarea.Tipo)
                                                </span>
                                                <span class="flex items-center gap-1">
                                                    <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                                                    </svg>
                                                    @tarea.FechaCreacion.ToString("dd/MM HH:mm")
                                                </span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                </div>
            </div>
        </div>
    }

    <!-- 🆕 MODAL: Todas las Tareas Pendientes -->
    @if (mostrarTareasPendientes)
    {
        <div class="fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-50 p-4">
            <div class="bg-white rounded-2xl shadow-2xl max-w-6xl w-full max-h-[90vh] overflow-y-auto">
                <div class="sticky top-0 bg-gradient-to-r from-purple-600 to-pink-600 text-white px-6 py-4 rounded-t-2xl">
                    <div class="flex items-center justify-between">
                        <div>
                            <h2 class="text-2xl font-bold">Todas las Tareas Pendientes</h2>
                            <p class="text-purple-100 text-sm mt-1">
                                @TotalTareasPendientes tareas activas
                            </p>
                        </div>
                        <button @onclick="() => mostrarTareasPendientes = false"
                                class="text-white hover:bg-white/20 rounded-lg p-2 transition-all">
                            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                            </svg>
                        </button>
                    </div>
                </div>

                <div class="p-6">
                    @if (!TodasLasTareasPendientes.Any())
                    {
                        <div class="text-center py-12">
                            <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                            </svg>
                            <h3 class="mt-2 text-sm font-medium text-gray-900">¡Excelente trabajo!</h3>
                            <p class="mt-1 text-sm text-gray-500">No hay tareas pendientes</p>
                        </div>
                    }
                    else
                    {
                        <div class="space-y-4">
                            @foreach (var grupo in TodasLasTareasPendientes.GroupBy(t => t.Turno))
                            {
                                <div class="border-2 border-gray-200 rounded-xl overflow-hidden">
                                    <div class="bg-gray-50 px-4 py-3 border-b-2 border-gray-200">
                                        <div class="flex items-center justify-between">
                                            <div>
                                                <h3 class="font-semibold text-gray-900">@grupo.Key.ClienteNombre</h3>
                                                <p class="text-sm text-gray-600">
                                                    @grupo.Key.Fecha.ToString("dd/MM/yyyy") - @grupo.Key.HoraInicio.ToString("HH:mm") - @grupo.Key.Servicio
                                                </p>
                                            </div>
                                            <span class="bg-purple-100 text-purple-800 text-xs font-semibold px-3 py-1 rounded-full">
                                                @grupo.Count() tareas
                                            </span>
                                        </div>
                                    </div>

                                    <div class="p-4 space-y-2">
                                        @foreach (var tarea in grupo.OrderByDescending(t => t.Prioridad))
                                        {
                                            <div class="flex items-start gap-3 p-3 rounded-lg hover:bg-gray-50 transition-all">
                                                <input type="checkbox"
                                                       checked="@(tarea.Estado == TareaEstado.Completada)"
                                                       @onchange="() => CompletarTarea(tarea)"
                                                       class="mt-1 h-5 w-5 rounded border-gray-300 text-purple-600 focus:ring-purple-500" />

                                                <div class="flex-1">
                                                    <div class="flex items-start justify-between gap-2">
                                                        <span class="font-medium text-gray-900">
                                                            @tarea.Titulo
                                                        </span>
                                                        <span class="@ObtenerBadgePrioridad(tarea.Prioridad)">
                                                            @ObtenerTextoPrioridad(tarea.Prioridad)
                                                        </span>
                                                    </div>
                                                    @if (!string.IsNullOrEmpty(tarea.Descripcion))
                                                    {
                                                        <p class="text-sm text-gray-600 mt-1">@tarea.Descripcion</p>
                                                    }
                                                    <p class="text-xs text-gray-500 mt-1">
                                                        @ObtenerTextoTipo(tarea.Tipo) • @tarea.FechaCreacion.ToString("dd/MM HH:mm")
                                                    </p>
                                                </div>
                                            </div>
                                        }
                                    </div>
                                </div>
                            }
                        </div>
                    }
                </div>
            </div>
        </div>
    }
</div>

@code {
    private List<TurnoDto> turnos = new();
    private TurnoDto nuevoTurno = new();
    private TareaDto nuevaTarea = new();
    private bool mostrarFormulario = false;
    private bool mostrarModalTareas = false;
    private bool mostrarFormularioTarea = false;
    private bool mostrarTareasPendientes = false;
    private TurnoDto? turnoSeleccionado = null;
    private DateTime fechaFiltro = DateTime.Today;
    private string estadoFiltro = "";
    private string profesionalFiltro = "";

    protected override void OnInitialized()
    {
        base.OnInitialized();

        var hoy = DateTime.Today;
        turnos = new List<TurnoDto>
        {
            new TurnoDto {
                ClienteNombre = "María González",
                Servicio = "Limpieza Facial Profunda",
                Profesional = "Dr. Juan Pérez",
                Fecha = hoy,
                HoraInicio = new TimeOnly(9, 0),
                Duracion = 60,
                Estado = "Confirmed",
                Notas = "",
                Tareas = new List<TareaDto>
                {
                    new TareaDto {
                        Titulo = "Confirmar que traiga estudios previos",
                        Descripcion = "Análisis de piel del mes pasado",
                        Tipo = TareaTipo.AntesDelTurno,
                        Prioridad = TareaPrioridad.Alta,
                        Estado = TareaEstado.Pendiente,
                        FechaCreacion = DateTime.Now.AddHours(-2)
                    },
                    new TareaDto {
                        Titulo = "Preparar sala con luz especial",
                        Tipo = TareaTipo.AntesDelTurno,
                        Prioridad = TareaPrioridad.Normal,
                        Estado = TareaEstado.Pendiente,
                        FechaCreacion = DateTime.Now.AddHours(-1)
                    }
                }
            },
            new TurnoDto {
                ClienteNombre = "Carlos Pérez",
                Servicio = "Depilación Definitiva - Piernas",
                Profesional = "Dra. Ana García",
                Fecha = hoy,
                HoraInicio = new TimeOnly(10, 30),
                Duracion = 90,
                Estado = "Scheduled",
                Notas = "Primera sesión",
                Tareas = new List<TareaDto>
                {
                    new TareaDto {
                        Titulo = "Llamar para confirmar asistencia",
                        Tipo = TareaTipo.AntesDelTurno,
                        Prioridad = TareaPrioridad.Urgente,
                        Estado = TareaEstado.Pendiente,
                        FechaCreacion = DateTime.Now.AddHours(-3)
                    }
                }
            },
            new TurnoDto {
                ClienteNombre = "Ana Martínez",
                Servicio = "Peeling Químico",
                Profesional = "Dr. Juan Pérez",
                Fecha = hoy,
                HoraInicio = new TimeOnly(14, 0),
                Duracion = 45,
                Estado = "Confirmed",
                Notas = ""
            },
            new TurnoDto {
                ClienteNombre = "Laura Rodríguez",
                Servicio = "Limpieza Facial",
                Profesional = "Dra. Ana García",
                Fecha = hoy,
                HoraInicio = new TimeOnly(15, 30),
                Duracion = 60,
                Estado = "Scheduled",
                Notas = ""
            }
        };

        // Asignar turnos a las tareas
        foreach (var turno in turnos)
        {
            foreach (var tarea in turno.Tareas)
            {
                tarea.Turno = turno;
            }
        }
    }

    private List<TurnoDto> TurnosFiltrados
    {
        get
        {
            var resultado = turnos.Where(t => t.Fecha.Date == fechaFiltro.Date);

            if (!string.IsNullOrWhiteSpace(estadoFiltro))
                resultado = resultado.Where(t => t.Estado == estadoFiltro);

            if (!string.IsNullOrWhiteSpace(profesionalFiltro))
                resultado = resultado.Where(t => t.Profesional == profesionalFiltro);

            return resultado.ToList();
        }
    }

    private int TotalTareasPendientes => turnos.SelectMany(t => t.Tareas).Count(t => t.Estado == TareaEstado.Pendiente);

    private List<TareaDto> TodasLasTareasPendientes => turnos
        .SelectMany(t => t.Tareas)
        .Where(t => t.Estado == TareaEstado.Pendiente)
        .OrderByDescending(t => t.Prioridad)
        .ThenBy(t => t.Turno.Fecha)
        .ThenBy(t => t.Turno.HoraInicio)
        .ToList();

    private void MostrarFormularioNuevo()
    {
        nuevoTurno = new TurnoDto
        {
            Fecha = fechaFiltro,
            Duracion = 60,
            Estado = "Scheduled",
            Profesional = CurrentUser.UserRole == "Professional" ? CurrentUser.FullName : ""
        };
        mostrarFormulario = true;
    }

    private void GuardarTurno()
    {
        if (!string.IsNullOrWhiteSpace(nuevoTurno.ClienteNombre) && !string.IsNullOrWhiteSpace(nuevoTurno.Servicio))
        {
            turnos.Add(nuevoTurno);
            mostrarFormulario = false;
            nuevoTurno = new TurnoDto();
        }
    }

    private void CancelarFormulario()
    {
        mostrarFormulario = false;
        nuevoTurno = new TurnoDto();
    }

    private void AbrirModalTareas(TurnoDto turno)
    {
        turnoSeleccionado = turno;
        mostrarModalTareas = true;
        mostrarFormularioTarea = false;
    }

    private void CerrarModalTareas()
    {
        mostrarModalTareas = false;
        turnoSeleccionado = null;
        mostrarFormularioTarea = false;
    }

    private void MostrarFormularioNuevaTarea()
    {
        nuevaTarea = new TareaDto
        {
            Tipo = TareaTipo.AntesDelTurno,
            Prioridad = TareaPrioridad.Normal,
            Estado = TareaEstado.Pendiente,
            FechaCreacion = DateTime.Now,
            Turno = turnoSeleccionado!
        };
        mostrarFormularioTarea = true;
    }

    private void CancelarFormularioTarea()
    {
        mostrarFormularioTarea = false;
        nuevaTarea = new TareaDto();
    }

    private void GuardarTarea()
    {
        if (!string.IsNullOrWhiteSpace(nuevaTarea.Titulo) && turnoSeleccionado != null)
        {
            nuevaTarea.Turno = turnoSeleccionado;
            turnoSeleccionado.Tareas.Add(nuevaTarea);
            mostrarFormularioTarea = false;
            nuevaTarea = new TareaDto();
        }
    }

    private void CompletarTarea(TareaDto tarea)
    {
        tarea.Estado = tarea.Estado == TareaEstado.Completada ? TareaEstado.Pendiente : TareaEstado.Completada;
        tarea.FechaCompletado = tarea.Estado == TareaEstado.Completada ? DateTime.Now : null;
    }

    private void EliminarTarea(TareaDto tarea)
    {
        if (turnoSeleccionado != null)
        {
            turnoSeleccionado.Tareas.Remove(tarea);
        }
    }

    private void ConfirmarTurno(TurnoDto turno)
    {
        turno.Estado = "Confirmed";
    }

    private void CompletarTurno(TurnoDto turno)
    {
        turno.Estado = "Completed";
    }

    private void CancelarTurno(TurnoDto turno)
    {
        turno.Estado = "Cancelled";
    }

    private string ObtenerBadgeEstado(string estado) => estado switch
    {
        "Scheduled" => "bg-blue-100 text-blue-800",
        "Confirmed" => "bg-green-100 text-green-800",
        "Completed" => "bg-indigo-100 text-indigo-800",
        "Cancelled" => "bg-red-100 text-red-800",
        _ => "bg-gray-100 text-gray-800"
    };

    private string ObtenerTextoEstado(string estado) => estado switch
    {
        "Scheduled" => "Agendado",
        "Confirmed" => "Confirmado",
        "Completed" => "Completado",
        "Cancelled" => "Cancelado",
        _ => estado
    };

    private string ObtenerClaseBorde(string estado) => estado switch
    {
        "Scheduled" => "border-blue-300",
        "Confirmed" => "border-green-300",
        "Completed" => "border-indigo-300",
        "Cancelled" => "border-red-300",
        _ => "border-gray-300"
    };

    private string ObtenerColorTexto(string estado) => estado switch
    {
        "Scheduled" => "text-blue-600",
        "Confirmed" => "text-green-600",
        "Completed" => "text-indigo-600",
        "Cancelled" => "text-red-600",
        _ => "text-gray-600"
    };

    private string ObtenerBadgePrioridad(TareaPrioridad prioridad) => prioridad switch
    {
        TareaPrioridad.Baja => "text-xs px-2 py-1 rounded-full bg-gray-100 text-gray-700 font-medium",
        TareaPrioridad.Normal => "text-xs px-2 py-1 rounded-full bg-blue-100 text-blue-700 font-medium",
        TareaPrioridad.Alta => "text-xs px-2 py-1 rounded-full bg-orange-100 text-orange-700 font-medium",
        TareaPrioridad.Urgente => "text-xs px-2 py-1 rounded-full bg-red-100 text-red-700 font-medium",
        _ => "text-xs px-2 py-1 rounded-full bg-gray-100 text-gray-700 font-medium"
    };

    private string ObtenerTextoPrioridad(TareaPrioridad prioridad) => prioridad switch
    {
        TareaPrioridad.Baja => "Baja",
        TareaPrioridad.Normal => "Normal",
        TareaPrioridad.Alta => "Alta",
        TareaPrioridad.Urgente => "⚠️ Urgente",
        _ => "Normal"
    };

    private string ObtenerBordeTarea(TareaPrioridad prioridad, TareaEstado estado) => estado == TareaEstado.Completada
        ? "border-gray-300"
        : prioridad switch
        {
            TareaPrioridad.Urgente => "border-red-300",
            TareaPrioridad.Alta => "border-orange-300",
            _ => "border-gray-300"
        };

    private string ObtenerTextoTipo(TareaTipo tipo) => tipo switch
    {
        TareaTipo.AntesDelTurno => "Antes del turno",
        TareaTipo.DespuesDelTurno => "Después del turno",
        TareaTipo.Administrativo => "Administrativo",
        TareaTipo.Seguimiento => "Seguimiento",
        _ => "General"
    };

    // DTOs
    public class TurnoDto
    {
        public string ClienteNombre { get; set; } = "";
        public string Servicio { get; set; } = "";
        public string Profesional { get; set; } = "";
        public DateTime Fecha { get; set; }
        public TimeOnly HoraInicio { get; set; } = new TimeOnly(9, 0);
        public int Duracion { get; set; }
        public string Estado { get; set; } = "Scheduled";
        public string? Notas { get; set; }
        public List<TareaDto> Tareas { get; set; } = new();
        public int TareasPendientes => Tareas.Count(t => t.Estado == TareaEstado.Pendiente);
    }

    public class TareaDto
    {
        public string Titulo { get; set; } = "";
        public string? Descripcion { get; set; }
        public TareaTipo Tipo { get; set; }
        public TareaPrioridad Prioridad { get; set; }
        public TareaEstado Estado { get; set; }
        public DateTime FechaCreacion { get; set; }
        public DateTime? FechaCompletado { get; set; }
        public TurnoDto Turno { get; set; } = null!;
    }

    public enum TareaTipo
    {
        AntesDelTurno,
        DespuesDelTurno,
        Administrativo,
        Seguimiento
    }

    public enum TareaPrioridad
    {
        Baja,
        Normal,
        Alta,
        Urgente
    }

    public enum TareaEstado
    {
        Pendiente,
        Completada
    }
}
